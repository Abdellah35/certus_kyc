kyc.document.meta.sql = SELECT \n\
DM.ID,\n\
DM.DOCUMENT_DESC , \n\
DM.DOCUMENT_LOGO , \n\
DM.DOCUMENT_NAME , \n\
DM.DOCUMENT_TYPE, \n\
CM.COUNTRY_NAME , \n\
CM.COUNTRY_CODE, \n\
CM.COUNTRY_LOGO \n\
FROM  \n\
KYC_DB.DOCUMENTS_META DM \n\
INNER JOIN CERTUS_CORE_DB.COUNTRY_MTB CM ON \n\
CM.ID = DM.COUNTRY_ID \n\
INNER JOIN CERTUS_CORE_DB.LOCATION_TBL LT ON LT.COUNTRY_ID = CM.ID \n\
INNER JOIN CERTUS_CORE_DB.USER_TBL UT ON LT.USER_ID = UT.ID \n\
WHERE UT.EMAIL_ID = :emailId \n\
AND DM.ID NOT IN (SELECT KD.DOCUMENT_ID FROM KYC_DB.KYC_DOCUMENTS KD \n\
WHERE (REQUESTEE_USERID = CERTUS_CORE_DB.GETUSERIDBYUSERNAME(:emailId) and PROCESS_STATUS != 'REQUESTED' )) \n\
AND DM.ID NOT IN (:ids)

kyc.document.details.meta.sql = SELECT \n\
DM.ID, \n\
DM.DOCUMENT_DESC ,\n\
DM.DOCUMENT_LOGO ,\n\
DM.DOCUMENT_NAME ,\n\
DM.DOCUMENT_TYPE,\n\
CM.COUNTRY_NAME ,\n\
CM.COUNTRY_CODE,\n\
CM.COUNTRY_LOGO \n\
FROM \n\
KYC_DB.DOCUMENTS_META DM \n\
LEFT JOIN CERTUS_CORE_DB.COUNTRY_MTB CM ON \n\
CM.ID = DM.COUNTRY_ID \n\
WHERE \n\
DM.ID =:id

kyc.document.client.overview = SELECT \n\
DM.ID, \n\
DM.DOCUMENT_DESC , \n\
DM.DOCUMENT_LOGO , \n\
DM.DOCUMENT_NAME , \n\
DM.DOCUMENT_TYPE, \n\
CM.COUNTRY_NAME , \n\
CM.COUNTRY_CODE, \n\
CM.COUNTRY_LOGO \n\
FROM \n\
KYC_DB.DOCUMENTS_META DM \n\
INNER JOIN CERTUS_CORE_DB.COUNTRY_MTB CM ON \n\
CM.ID = DM.COUNTRY_ID \n\
INNER JOIN CERTUS_CORE_DB.COMPANY_PROFILE CP ON \n\
CP.COUNTRY = CM.ID \n\
INNER JOIN CERTUS_CORE_DB.USER_COMPANY_MAPPING UCM ON \n\
UCM.COMPANY_ID = CP.ID \n\
INNER JOIN CERTUS_CORE_DB.USER_TBL UT ON \n\
UT.ID = UCM.USER_ID \n\
WHERE \n\
UT.EMAIL_ID = :emailId


insert.kyc.request.user.document.sql= INSERT INTO kyc_db.kyc_documents \n\
(company_id, requestor_userid, requestee_userid, document_id, created_date, created_by, process_status) \n\
VALUES(:companyId, :requestorUserId, :requesteeUserId, :documentId, :createdDate, :createdBy, :processStatus)


update.kyc.process.status.document.sql=update \n\
kyc_db.kyc_documents kd \n\
set \n\
kd.process_status = :processStatus, \n\
kd.modified_by = :modifiedBy, \n\
kd.modified_date = :modifiedDate \n\
where \n\
kd.id in (:ids) \n\
and company_id=:companyId

update.kyc.user.status.sql=update \n\
kyc_db.kyc_status_details_tbl kd \n\
set \n\
kd.status = :status, \n\
kd.modified_by = :modifiedBy, \n\
kd.modified_at = :modifiedAt \n\
where \n\
kd.user_id = :userId \n\
and kd.company_id=:companyId

insert.kyc.user.status.sql=insert \n\
into \n\
kyc_db.kyc_status_details_tbl(user_id, company_id, status, created_by, created_at, unregistered_user) \n\
values (:userId, :companyId, :status, :createdBy, :createdAt, :unregisteredUser)

get.kyc.user.status.count.sql= select count(1) \n\
from kyc_db.kyc_status_details_tbl kd  \n\
where kd.company_id = :companyId \n\
and kd.user_id = :userId

get.kyc.user.status.sql= select * \n\
from kyc_db.kyc_status_details_tbl kd  \n\
where kd.company_id = :companyId \n\
and kd.user_id = :userId

insert.kyc.notification.sql=insert \n\
into \n\
notification_tbl(module, message, native_message, company_id, requestee_user_id, requestor_user_id, created_at) \n\
values (:module, :message, :nativeMessage, :companyId, :requesteeUserId, :requestorUserId, :createdAt) 


list.of.requested.clients.sql = select cp.id, cp.company_name, cp.logo_url, nts.notification_count, max(kd.created_date) as last_requested_date, ksdt.status as kyc_status \n\
from kyc_db.kyc_documents kd \n\
inner join \n\
certus_core_db.company_profile cp \n\
on cp.id = kd.company_id \n\
left join \n\
(select nt.company_id, count(CASE WHEN nt.message_read < 1 THEN nt.message_read ELSE null end) as notification_count \n\
from \n\
certus_core_db.notification_tbl nt \n\
where nt.requestee_user_id =:userId \n\
group by nt.company_id \n\
) as nts \n\
on nts.company_id = cp.id \n\
inner join kyc_db.kyc_status_details_tbl ksdt \n\
on ksdt.company_id = cp.id \n\
where \n\
kd.requestee_userid =:userId \n\
group by cp.id


is.user.documents.requestBy.clientSql = select count(1) \n\
from kyc_db.kyc_documents kd  \n\
where kd.company_id = :companyId \n\
and kd.requestee_userid = :requesteeUserId \n\
and kd.document_id = :docId

user.kyc.status.summary.dashboard.sql=select \n\
SUM(CASE WHEN status = 'APPROVED' THEN 1 ELSE 0 END) AS approved_count, \n\
SUM(CASE WHEN status = 'REQUESTED' THEN 1 ELSE 0 END) AS requested_count, \n\
SUM(CASE WHEN status = 'PENDING'THEN 1 ELSE 0 END) AS pending_count, \n\
SUM(CASE WHEN status = 'REJECTED'THEN 1 ELSE 0 END) AS rejected_count \n\
from kyc_db.kyc_status_details_tbl \n\
{0}
